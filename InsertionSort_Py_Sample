def insertionSort(arr):
 
    for i in range(1, len(arr)):
        idx = arr[i]
        x = i-1
        while x >= 0 and idx < arr[x]:
            arr[x + 1] = arr[x]
            x -= 1
        arr[x + 1] = idx
 
arr = [2,5,7,5,3,9,1,5,7,1,6,3,8,1,6,9,4,7,5,0,1,0,3,5,7,8]
insertionSort(arr)
for i in range(len(arr)):
    print(arr[i])
    
    
    
# Partition function for quicksort
def partition(arr, low, high):
    pivot = arr[high]
    i = j = low
    for i in range(low, high):
        if arr[i]<pivot:
            a[i], a[j]= a[j], a[i]
            j+= 1
    a[j], a[high]= a[high], a[j]
    return j
 
# Function to call the partition function
# and perform quick sort on the array
def quick_sort(arr, low, high):
    if low<high:
        pivot = partition(arr, low, high)
        quick_sort(arr, low, pivot-1)
        quick_sort(arr, pivot + 1, high)
        return arr
 
# Hybrid function -> Quick + Insertion sort
def hybrid_quick_sort(arr, low, high):
    while low<high:
 
        # If the size of the array is less
        # than threshold apply insertion sort
        # and stop recursion
        if high-low + 1<10:
            insertion_sort(arr, low, high)
            break
 
        else:
            pivot = partition(arr, low, high)
 
            # Optimised quicksort which works on
            # the smaller arrays first
 
            # If the left side of the pivot
            # is less than right, sort left part
            # and move to the right part of the array
            if pivot-low<high-pivot:
                hybrid_quick_sort(arr, low, pivot-1)
                low = pivot + 1
            else:
                # If the right side of pivot is less
                # than left, sort right side and
                # move to the left side
                hybrid_quick_sort(arr, pivot + 1, high)
                high = pivot-1
 
# Driver code
 
a = [ 24, 97, 40, 67, 88, 85, 15,
      66, 53, 44, 26, 48, 16, 52,
      45, 23, 90, 18, 49, 80, 23 ]
hybrid_quick_sort(a, 0, 20)
print(a)
