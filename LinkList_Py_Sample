# the node class is used to create an element holder and the respective reference pointers. 
class Node: 
    def __init__(self, data=None, next=None):
        self.data = data  # the value part of the node
        self.next = next  # the pointer part of the node

# this is the main class that that is used to create the linked list data struture which contains many functions.
class LinkedList:
    
    def __init__(self):
        self.head = None
        
    # insert the nodes/element holders beginning of list
    def Insert_at_beginning(self, data):
        # create node with the data and a pointer to specific value at the node (i.e.. the head)
        node = Node(data, self.head)
        self.head = node  # sets the head to point towards the newly inserted node, which pushes the previous element down the stack
        
    # insert the nodes/element holders at end of list
    def Insert_at_ending(self, data):
        if self.head is None:
            self.head = Node(data)
            return
        itr = self.head
        while itr.next:
            itr = itr.next
        itr.next = Node(data)
        
        
    # this function inserts a list of values to the linked list at the end
    def insert_values(self, value_list):

        self.head = None

        for value in value_list:
            self.Insert_at_ending(value)
    # this function is used to get the length of the linked list.
    def get_length(self):
        count = 0
        itr = self.head
        while itr:
            count += 1
            itr = itr.next
        return count

    # the below function is used to insert a value just after an existing value in the list
    def insert_after_value(self, data_after, data_to_insert):
        if self.head is None:
            return

        if self.head.data == data_after:
            self.head.next = Node(data_to_insert, self.head.next)
            return

        itr = self.head
        while itr:
            if itr.data == data_after:
                itr.next = Node(data_to_insert, itr.next)
                break

            itr = itr.next
    # the below function is used to remove a particular value which in present in the list.
    def remove_by_value(self, data):
        if self.head is None:
            return

        if self.head.data == data:
            self.head = self.head.next
            return

        itr = self.head
        while itr.next:
            if itr.next.data == data:
                itr.next = itr.next.next
                break
            itr = itr.next
    # this function simply orints all the values present inthe list.
    def display(self):
        if self.head is None:
            print('list is empty')
            return
        itr = self.head
        llstr = ''
        while itr:
            llstr += str(itr.data) + '-->'
            itr = itr.next
        print(llstr)


if __name__ == "__main__":
    ll = LinkedList()
    ll.insert_values(["first", "second", "third"])
    ll.display()
    # ll.remove_by_value("first")
    # ll.remove_by_value("second")
    # ll.remove_by_value("third")
    # ll.display() #Display Clear
    
    
    
    
#--------------------------------------------------------------- ARRAY IMPEMENTAITON---------------------------------------------------------

# #Array based stack & queue
# class Queue:
#     def __init__(self):
#         self.s1 = []
#         self.s2 = []
 
#     #Functionaly the same as enQueue - places the x argument into stack 1
#     def push(self, x):
#         self.s1.append(x)
 
#     #Functionaly the same as deQueue. Logic here determined scenarios, but you are attempting to 
#     def pop(self):
 
#         # if both the stacks are empty
#         if len(self.s1) == 0 and len(self.s2) == 0:
#             print("No Queue")
#             return
 
#         # if s2 is empty and s1 has elements then we will move s1 values to s2 repeatedly until s1 is empty.
#         # this effectively reverses the first in last out of a singular stack to make it a queue system.
#         elif len(self.s2) == 0 and len(self.s1) > 0:
#             while len(self.s1):
#                 s1Pop = self.s1.pop()
#                 self.s2.append(s1Pop)
#             return self.s2.pop()
 
#         else:
#             return self.s2.pop()
 
# if __name__ == '__main__':
#     q = Queue()
#     #Think of these values as representing an ID or individual instance of something in a queue.
#     q.push('First Place')
#     q.push('Second Place')
#     q.push('Third Place')
    
#     print(q.pop()) #retrieves first place
#     print(q.pop()) #retrieves second place
#     print(q.pop()) #retrieves third place
#     print(q.pop()) #retrieves none as there are no values in the stacks
